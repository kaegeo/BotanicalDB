// <auto-generated />
using BotanicalDB.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BotanicalDB.Migrations
{
    [DbContext(typeof(FowlerPlantContext))]
    [Migration("20231005160714_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BotanicalDB.Models.Plant", b =>
                {
                    b.Property<int>("PlantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlantId"));

                    b.Property<string>("AquiredDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ComplexId")
                        .HasColumnType("int");

                    b.Property<string>("Distribution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlantStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlantType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Synonym")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlantId");

                    b.HasIndex("ComplexId");

                    b.ToTable("Plants");

                    b.HasData(
                        new
                        {
                            PlantId = 1,
                            AquiredDate = "September 2022",
                            ComplexId = 1,
                            Distribution = "Indonesia",
                            PlantName = "Alocasia azlanii",
                            PlantStatus = "Healthy",
                            PlantType = "Species",
                            Synonym = "Red Mambo"
                        },
                        new
                        {
                            PlantId = 2,
                            AquiredDate = "May 2023",
                            ComplexId = 2,
                            Distribution = "Philippines",
                            PlantName = "Alocasia heterophylla",
                            PlantStatus = "Healthy",
                            PlantType = "Species",
                            Synonym = "Dragon's Breath"
                        },
                        new
                        {
                            PlantId = 3,
                            AquiredDate = "May 2023",
                            ComplexId = 3,
                            Distribution = "Philippines",
                            PlantName = "Alocasia sanderiana",
                            PlantStatus = "Healthy",
                            PlantType = "Species",
                            Synonym = "Nobilis"
                        });
                });

            modelBuilder.Entity("BotanicalDB.Models.SpeciesComplex", b =>
                {
                    b.Property<int>("ComplexId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComplexId"));

                    b.Property<string>("ComplexName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ComplexId");

                    b.ToTable("SpeciesComplexes");

                    b.HasData(
                        new
                        {
                            ComplexId = 1,
                            ComplexName = "Undetermined"
                        },
                        new
                        {
                            ComplexId = 2,
                            ComplexName = "Hybrid"
                        },
                        new
                        {
                            ComplexId = 3,
                            ComplexName = "Cuprea group"
                        },
                        new
                        {
                            ComplexId = 4,
                            ComplexName = "Heterophylla group"
                        },
                        new
                        {
                            ComplexId = 5,
                            ComplexName = "Longiloba group"
                        });
                });

            modelBuilder.Entity("BotanicalDB.Models.Plant", b =>
                {
                    b.HasOne("BotanicalDB.Models.SpeciesComplex", "Complex")
                        .WithMany()
                        .HasForeignKey("ComplexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Complex");
                });
#pragma warning restore 612, 618
        }
    }
}
